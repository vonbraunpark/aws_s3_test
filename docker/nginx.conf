# Nginx가 사용할 작업 프로세스 개수 1
worker_processes 1;

# 이벤트 처리 설정 블랙으로 한 개의 작업 프로세스가 1024개의 클라이언트와 동시 연결이 가능함
# 결론은 이 사이트는 1024 개임 (어차피 100명 모으기도 힘듬)
events { worker_connections 1024; }

# HTTP 요청을 처리하는 메인 설정 블록
http {
     # 파일 확장자에 따라 Content-Type 헤더를 지정하도록 구성
     # *.js -> application/javascript
     # *.css -> text/css
     include            mime.types;
     # 파일 확장자가 인식되지 않으면 그냥 바이너리 파일로 인식 (사진 등등)
     default_type       application/octet-stream;

     # 정적파일(빌드된 정보) 전송시 OS 커널 레벨에서 직접 전송
     # 결론적으로 디스크에서 I/O 발생시키는 것을 최소화하여 성능을 높이는 부분임.
     sendfile           on;
     # 클라이언트와 연결 유지를 65초 정도 하는 것임.
     # 게임 서버는 아니니까 유지할 필요도 없음.
     keepalive_timeout  65;

     # 하나의 웹 서버를 정의함
     # 결국 이 파트가 요청 수신 / 응답 송신을 결정
     server {
         # Docker Container 내부에서는 80번 포트임 (feat by Dockerfile)
         listen         80;
         # 내부에서 서버 이름은 localhost임.
         server_name    localhost;

         # npm run build로 구성한 정보들이 예기에 있으니까
         # root 위치를 해당 nginx 구성으로 걸어줌.
         root           /usr/share/nginx/html;
         # 기본 시작을 index.ntml로 시작하도록 만듬
         index          index.html;

         # 모든 '/' 경로에 대한 요청 처리
         location / {
             # 먼저 'js/app.js' 가 존재하는지 여부를 체크함.
             # 존재하지 않는다면 모든 요청을 /index.html로 보냄 (SPA 방식에서는 필수임)
             # 이름 통해 React, Vue, Svelte 등의 라우팅 작업을 가능하도록 만듬.
             try_files $uri /index.html;
         }
     }
}